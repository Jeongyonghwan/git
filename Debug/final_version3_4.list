
final_version3_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080043d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080043d8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010373  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f41  00000000  00000000  000303af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00033240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a659  00000000  00000000  00034078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf66  00000000  00000000  0005e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010769e  00000000  00000000  0006b637  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172cd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  00172d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004334 	.word	0x08004334

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004334 	.word	0x08004334

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_GPIO_Init+0x80>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <MX_GPIO_Init+0x80>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_GPIO_Init+0x80>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_GPIO_Init+0x80>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <MX_GPIO_Init+0x80>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_GPIO_Init+0x80>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_GPIO_Init+0x80>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <MX_GPIO_Init+0x80>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_GPIO_Init+0x80>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800055a:	2304      	movs	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_GPIO_Init+0x84>)
 800056e:	f000 fc33 	bl	8000dd8 <HAL_GPIO_Init>

}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 faa9 	bl	8000ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f844 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f7ff ffb4 	bl	80004fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000594:	f000 f93e 	bl	8000814 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f9e8 	bl	800096c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Init(&htim2);
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <main+0x88>)
 800059e:	f002 fa67 	bl	8002a70 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005a2:	2108      	movs	r1, #8
 80005a4:	4819      	ldr	r0, [pc, #100]	; (800060c <main+0x88>)
 80005a6:	f002 fabb 	bl	8002b20 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */

	  /*rcvStat = HAL_UART_Receive(&huart1, &received, 1, 10);*/

	  pin_number = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <main+0x8c>)
 80005ae:	f000 fda5 	bl	80010fc <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <main+0x90>)
 80005b8:	601a      	str	r2, [r3, #0]

	  if(pin_number=0)
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <main+0x90>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <main+0x90>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00e      	beq.n	80005e6 <main+0x62>
		  {TIM2->CCR3=4000;
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80005d0:	63da      	str	r2, [r3, #60]	; 0x3c

	  	   HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 faf7 	bl	8000bc8 <HAL_Delay>
	  	   TIM2->CCR3=3700;}
 80005da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005de:	f640 6274 	movw	r2, #3700	; 0xe74
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e4:	e7e1      	b.n	80005aa <main+0x26>

	  else if(pin_number=1)
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x90>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
		  {TIM2->CCR3=3500;
 80005ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80005f4:	63da      	str	r2, [r3, #60]	; 0x3c

		   HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f000 fae5 	bl	8000bc8 <HAL_Delay>
		   TIM2->CCR3=3700;}
 80005fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000602:	f640 6274 	movw	r2, #3700	; 0xe74
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c
	  pin_number = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000608:	e7cf      	b.n	80005aa <main+0x26>
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c
 8000610:	48000800 	.word	0x48000800
 8000614:	20000028 	.word	0x20000028

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0bc      	sub	sp, #240	; 0xf0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fe7c 	bl	8004324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2294      	movs	r2, #148	; 0x94
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fe6e 	bl	8004324 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 fd8f 	bl	800116c <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000654:	f000 f856 	bl	8000704 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000658:	2310      	movs	r3, #16
 800065a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800066a:	2360      	movs	r3, #96	; 0x60
 800066c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000682:	233c      	movs	r3, #60	; 0x3c
 8000684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fe08 	bl	80012b4 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 f82b 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2303      	movs	r3, #3
 80006b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fa14 	bl	8001b00 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006de:	f000 f811 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006e6:	2300      	movs	r3, #0
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fcb7 	bl	8002060 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006f8:	f000 f804 	bl	8000704 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	37f0      	adds	r7, #240	; 0xf0
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	e7fe      	b.n	800070a <Error_Handler+0x6>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	; 0x60
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	; 0x58
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f9f2 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <SystemInit+0x64>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <SystemInit+0x64>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <SystemInit+0x68>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <SystemInit+0x68>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <SystemInit+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <SystemInit+0x68>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <SystemInit+0x68>)
 80007d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <SystemInit+0x68>)
 80007e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <SystemInit+0x68>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <SystemInit+0x68>)
 80007ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <SystemInit+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <SystemInit+0x64>)
 80007fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00
 8000810:	40021000 	.word	0x40021000

08000814 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000842:	f240 42af 	movw	r2, #1199	; 0x4af
 8000846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000850:	f241 3287 	movw	r2, #4999	; 0x1387
 8000854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000864:	f002 f904 	bl	8002a70 <HAL_TIM_PWM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800086e:	f7ff ff49 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000882:	f002 fef9 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800088c:	f7ff ff3a 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000890:	2360      	movs	r3, #96	; 0x60
 8000892:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	2208      	movs	r2, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <MX_TIM2_Init+0xb0>)
 80008a8:	f002 fa40 	bl	8002d2c <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80008b2:	f7ff ff27 	bl	8000704 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <MX_TIM2_Init+0xb0>)
 80008b8:	f000 f824 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000002c 	.word	0x2000002c

080008c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d8:	d10b      	bne.n	80008f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000924:	d11c      	bne.n	8000960 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_TIM_MspPostInit+0x64>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_TIM_MspPostInit+0x64>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_TIM_MspPostInit+0x64>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800093e:	2304      	movs	r3, #4
 8000940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fa3c 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009b6:	f002 fee7 	bl	8003788 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f7ff fea0 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009c8:	f003 fba3 	bl	8004112 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f7ff fe97 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009da:	f003 fbd8 	bl	800418e <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f7ff fe8e 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART1_UART_Init+0x90>)
 80009ea:	f003 fb59 	bl	80040a0 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f7ff fe86 	bl	8000704 <Error_Handler>
  }

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000078 	.word	0x20000078
 8000a00:	40013800 	.word	0x40013800

08000a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x80>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d129      	bne.n	8000a7a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_UART_MspInit+0x84>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f000 f9af 	bl	8000dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40021000 	.word	0x40021000

08000a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a90:	f7ff fe8a 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aa6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
	ldr	r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ab6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f003 fc0f 	bl	80042dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000abe:	f7ff fd61 	bl	8000584 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000ac8:	080043cc 	.word	0x080043cc
	ldr	r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ad0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ad4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ad8:	20000108 	.word	0x20000108

08000adc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_IRQHandler>

08000ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f941 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f80e 	bl	8000b10 <HAL_InitTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b00:	f7ff fe04 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d023      	beq.n	8000b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_InitTick+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f93f 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10f      	bne.n	8000b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f917 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_InitTick+0x74>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e004      	b.n	8000b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e001      	b.n	8000b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000104 	.word	0x20000104

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000104 	.word	0x20000104

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_Delay+0x40>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff47 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff5c 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffb0 	bl	8000d2c <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e166      	b.n	80010b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8158 	beq.w	80010b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d00b      	beq.n	8000e20 <HAL_GPIO_Init+0x48>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d007      	beq.n	8000e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e14:	2b11      	cmp	r3, #17
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	f003 0201 	and.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0xea>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d123      	bne.n	8000f0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	6939      	ldr	r1, [r7, #16]
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0203 	and.w	r2, r3, #3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 80b2 	beq.w	80010b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6613      	str	r3, [r2, #96]	; 0x60
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f64:	4a5c      	ldr	r2, [pc, #368]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8e:	d02b      	beq.n	8000fe8 <HAL_GPIO_Init+0x210>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d025      	beq.n	8000fe4 <HAL_GPIO_Init+0x20c>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x308>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d01f      	beq.n	8000fe0 <HAL_GPIO_Init+0x208>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <HAL_GPIO_Init+0x30c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d019      	beq.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_GPIO_Init+0x310>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x200>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <HAL_GPIO_Init+0x314>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1fc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <HAL_GPIO_Init+0x318>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1f8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4c      	ldr	r2, [pc, #304]	; (80010f4 <HAL_GPIO_Init+0x31c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1f4>
 8000fc8:	2307      	movs	r3, #7
 8000fca:	e00e      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fcc:	2308      	movs	r3, #8
 8000fce:	e00c      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	e00a      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e008      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x212>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffa:	4937      	ldr	r1, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <HAL_GPIO_Init+0x320>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102c:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <HAL_GPIO_Init+0x320>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001056:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_GPIO_Init+0x320>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_GPIO_Init+0x320>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_GPIO_Init+0x320>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f ae91 	bne.w	8000de8 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48001400 	.word	0x48001400
 80010f0:	48001800 	.word	0x48001800
 80010f4:	48001c00 	.word	0x48001c00
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e001      	b.n	800111e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	e00b      	b.n	800115c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001152:	d102      	bne.n	800115a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	e000      	b.n	800115c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800115a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000

0800116c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d141      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800117a:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d131      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118e:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a0:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2232      	movs	r2, #50	; 0x32
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011be:	e002      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d102      	bne.n	80011da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f2      	bne.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d158      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e057      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011fc:	e04d      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001204:	d141      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d131      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2232      	movs	r2, #50	; 0x32
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124a:	e002      	b.n	8001252 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3b01      	subs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d102      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f2      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d112      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e011      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001288:	e007      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40007000 	.word	0x40007000
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f000 bc16 	b.w	8001af4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c8:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d2:	4b9e      	ldr	r3, [pc, #632]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80e4 	beq.w	80014b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_RCC_OscConfig+0x4c>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	f040 808b 	bne.w	800140e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	f040 8087 	bne.w	800140e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_OscConfig+0x64>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e3ed      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1a      	ldr	r2, [r3, #32]
 800131c:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_RCC_OscConfig+0x7e>
 8001328:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001330:	e005      	b.n	800133e <HAL_RCC_OscConfig+0x8a>
 8001332:	4b86      	ldr	r3, [pc, #536]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133e:	4293      	cmp	r3, r2
 8001340:	d223      	bcs.n	800138a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fdc8 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e3ce      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001356:	4b7d      	ldr	r3, [pc, #500]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7c      	ldr	r2, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4977      	ldr	r1, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001374:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4972      	ldr	r1, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e025      	b.n	80013d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138a:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a6f      	ldr	r2, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	496a      	ldr	r1, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4965      	ldr	r1, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fd88 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e38e      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d6:	f000 fcbf 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 80013da:	4601      	mov	r1, r0
 80013dc:	4b5b      	ldr	r3, [pc, #364]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	4a5a      	ldr	r2, [pc, #360]	; (8001550 <HAL_RCC_OscConfig+0x29c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	fa21 f303 	lsr.w	r3, r1, r3
 80013f2:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_OscConfig+0x2a0>)
 80013f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f6:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x2a4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb88 	bl	8000b10 <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d052      	beq.n	80014b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	e372      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d032      	beq.n	800147c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001422:	f7ff fbc5 	bl	8000bb0 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142a:	f7ff fbc1 	bl	8000bb0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e35b      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	493a      	ldr	r1, [pc, #232]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	4935      	ldr	r1, [pc, #212]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
 800147a:	e01a      	b.n	80014b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb92 	bl	8000bb0 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001490:	f7ff fb8e 	bl	8000bb0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e328      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1dc>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d073      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_OscConfig+0x21c>
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d10e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d10b      	bne.n	80014e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d063      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d15f      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e305      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x24c>
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x298>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0x288>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x270>
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0x288>
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_RCC_OscConfig+0x298>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_RCC_OscConfig+0x298>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01b      	beq.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb34 	bl	8000bb0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	e010      	b.n	800156e <HAL_RCC_OscConfig+0x2ba>
 800154c:	40021000 	.word	0x40021000
 8001550:	0800435c 	.word	0x0800435c
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb28 	bl	8000bb0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e2c2      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4baf      	ldr	r3, [pc, #700]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb18 	bl	8000bb0 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb14 	bl	8000bb0 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e2ae      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x2d0>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d060      	beq.n	8001674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x310>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	4b99      	ldr	r3, [pc, #612]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x328>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e28b      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b93      	ldr	r3, [pc, #588]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	4990      	ldr	r1, [pc, #576]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	e040      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d023      	beq.n	8001642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fa:	4b8c      	ldr	r3, [pc, #560]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a8b      	ldr	r2, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fad3 	bl	8000bb0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff facf 	bl	8000bb0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e269      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	497c      	ldr	r1, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a79      	ldr	r2, [pc, #484]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff faaf 	bl	8000bb0 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff faab 	bl	8000bb0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e245      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d03c      	beq.n	80016fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	4a67      	ldr	r2, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fa8a 	bl	8000bb0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fa86 	bl	8000bb0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e220      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCC_OscConfig+0x3ec>
 80016c0:	e01b      	b.n	80016fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa6d 	bl	8000bb0 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fa69 	bl	8000bb0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e203      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ef      	bne.n	80016da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80a6 	beq.w	8001854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800170c:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d118      	bne.n	8001772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a3a      	ldr	r2, [pc, #232]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7ff fa30 	bl	8000bb0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff fa2c 	bl	8000bb0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1c6      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_RCC_OscConfig+0x57c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x4d8>
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178a:	e024      	b.n	80017d6 <HAL_RCC_OscConfig+0x522>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d110      	bne.n	80017b6 <HAL_RCC_OscConfig+0x502>
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x578>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b4:	e00f      	b.n	80017d6 <HAL_RCC_OscConfig+0x522>
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff f9e7 	bl	8000bb0 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f9e3 	bl	8000bb0 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e17b      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ed      	beq.n	80017e6 <HAL_RCC_OscConfig+0x532>
 800180a:	e01a      	b.n	8001842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff f9d0 	bl	8000bb0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff f9cc 	bl	8000bb0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d906      	bls.n	8001834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e164      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001834:	4ba8      	ldr	r3, [pc, #672]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e8      	bne.n	8001814 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7ffb      	ldrb	r3, [r7, #31]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4ba3      	ldr	r3, [pc, #652]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	4aa2      	ldr	r2, [pc, #648]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001868:	4b9b      	ldr	r3, [pc, #620]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 800186a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186e:	4a9a      	ldr	r2, [pc, #616]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f99a 	bl	8000bb0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001880:	f7ff f996 	bl	8000bb0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e130      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001892:	4b91      	ldr	r3, [pc, #580]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ef      	beq.n	8001880 <HAL_RCC_OscConfig+0x5cc>
 80018a0:	e01b      	b.n	80018da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a2:	4b8d      	ldr	r3, [pc, #564]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80018a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a8:	4a8b      	ldr	r2, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff f97d 	bl	8000bb0 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ba:	f7ff f979 	bl	8000bb0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e113      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018cc:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80018ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ef      	bne.n	80018ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8107 	beq.w	8001af2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80cb 	bne.w	8001a84 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ee:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	429a      	cmp	r2, r3
 8001900:	d12c      	bne.n	800195c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	3b01      	subs	r3, #1
 800190e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d123      	bne.n	800195c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d11b      	bne.n	800195c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d113      	bne.n	800195c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	3b01      	subs	r3, #1
 8001942:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d109      	bne.n	800195c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	3b01      	subs	r3, #1
 8001956:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d06d      	beq.n	8001a38 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d068      	beq.n	8001a34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0ba      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800197e:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001988:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800198a:	f7ff f911 	bl	8000bb0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f90d 	bl	8000bb0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0a7      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x828>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0552      	lsls	r2, r2, #21
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ea:	06d2      	lsls	r2, r2, #27
 80019ec:	430a      	orrs	r2, r1
 80019ee:	493a      	ldr	r1, [pc, #232]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0c:	f7ff f8d0 	bl	8000bb0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f8cc 	bl	8000bb0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e066      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a32:	e05e      	b.n	8001af2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e05d      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d156      	bne.n	8001af2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5c:	f7ff f8a8 	bl	8000bb0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f8a4 	bl	8000bb0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e03e      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x7b0>
 8001a82:	e036      	b.n	8001af2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d031      	beq.n	8001aee <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001aa8:	f023 0303 	bic.w	r3, r3, #3
 8001aac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x824>)
 8001ab4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f877 	bl	8000bb0 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	e00c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f873 	bl	8000bb0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d905      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e00d      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x848>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ec      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x812>
 8001aec:	e001      	b.n	8001af2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e10f      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d910      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b86      	ldr	r3, [pc, #536]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 020f 	bic.w	r2, r3, #15
 8001b2e:	4984      	ldr	r1, [pc, #528]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0f7      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8089 	beq.w	8001c68 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d133      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0e4      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001b6e:	f000 fa0f 	bl	8001f90 <RCC_GetSysClockFreqFromPLLSource>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <HAL_RCC_ClockConfig+0x248>)
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d955      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8e:	4a6d      	ldr	r2, [pc, #436]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e044      	b.n	8001c26 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03e      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x126>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13a      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bb0:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb8:	4a62      	ldr	r2, [pc, #392]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e02f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0ac      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be6:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0a0      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e098      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001c06:	f000 f8a7 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b4e      	ldr	r3, [pc, #312]	; (8001d48 <HAL_RCC_ClockConfig+0x248>)
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d909      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4944      	ldr	r1, [pc, #272]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c38:	f7fe ffba 	bl	8000bb0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7fe ffb6 	bl	8000bb0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e070      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4930      	ldr	r1, [pc, #192]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d105      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c98:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d210      	bcs.n	8001cca <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 020f 	bic.w	r2, r3, #15
 8001cb0:	4923      	ldr	r1, [pc, #140]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_ClockConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e036      	b.n	8001d38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4918      	ldr	r1, [pc, #96]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4910      	ldr	r1, [pc, #64]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d08:	f000 f826 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_RCC_ClockConfig+0x24c>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x250>)
 8001d26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x254>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe feef 	bl	8000b10 <HAL_InitTick>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	04c4b400 	.word	0x04c4b400
 8001d4c:	0800435c 	.word	0x0800435c
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d11e      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db4:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e004      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d133      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa4>
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xaa>
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dfe:	617b      	str	r3, [r7, #20]
      break;
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	617b      	str	r3, [r7, #20]
      break;
 8001e0c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	3301      	adds	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	fb02 f203 	mul.w	r2, r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0e5b      	lsrs	r3, r3, #25
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e4e:	69bb      	ldr	r3, [r7, #24]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08004374 	.word	0x08004374
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e88:	f7ff fff0 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	0800436c 	.word	0x0800436c

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eb4:	f7ff ffda 	bl	8001e6c <HAL_RCC_GetHCLKFreq>
 8001eb8:	4601      	mov	r1, r0
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0adb      	lsrs	r3, r3, #11
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	0800436c 	.word	0x0800436c

08001edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff f91a 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
 8001efa:	e014      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f14:	f7ff f90a 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d10b      	bne.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b80      	cmp	r3, #128	; 0x80
 8001f32:	d913      	bls.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2ba0      	cmp	r3, #160	; 0xa0
 8001f38:	d902      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e00d      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e00a      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4a:	d902      	bls.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e004      	b.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b70      	cmp	r3, #112	; 0x70
 8001f56:	d101      	bne.n	8001f5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f58:	2301      	movs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 020f 	bic.w	r2, r3, #15
 8001f64:	4909      	ldr	r1, [pc, #36]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40022000 	.word	0x40022000

08001f90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d118      	bne.n	8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e005      	b.n	8001fce <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d002      	beq.n	8001fee <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001fec:	e005      	b.n	8001ffa <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001ff0:	613b      	str	r3, [r7, #16]
    break;
 8001ff2:	e005      	b.n	8002000 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ff6:	613b      	str	r3, [r7, #16]
    break;
 8001ff8:	e002      	b.n	8002000 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	613b      	str	r3, [r7, #16]
    break;
 8001ffe:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3301      	adds	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	fb02 f203 	mul.w	r2, r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	3301      	adds	r3, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002040:	683b      	ldr	r3, [r7, #0]
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	08004374 	.word	0x08004374
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002068:	2300      	movs	r3, #0
 800206a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800206c:	2300      	movs	r3, #0
 800206e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03d      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002080:	2b40      	cmp	r3, #64	; 0x40
 8002082:	d00b      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d804      	bhi.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00e      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d015      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002090:	e01d      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002092:	2b60      	cmp	r3, #96	; 0x60
 8002094:	d01e      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d01c      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800209a:	e018      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800209c:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a85      	ldr	r2, [pc, #532]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a8:	e015      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fafd 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80020b6:	4603      	mov	r3, r0
 80020b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020ba:	e00c      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3320      	adds	r3, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fbe4 	bl	8002890 <RCCEx_PLLSAI2_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020cc:	e003      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	74fb      	strb	r3, [r7, #19]
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80020d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020dc:	4b76      	ldr	r3, [pc, #472]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020e2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ea:	4973      	ldr	r1, [pc, #460]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80020f2:	e001      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d042      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d00f      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800210e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002112:	d805      	bhi.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d011      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211c:	d017      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800211e:	e01f      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002124:	d01f      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d01c      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800212c:	e018      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800212e:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800213a:	e015      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fab4 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800214c:	e00c      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3320      	adds	r3, #32
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fb9b 	bl	8002890 <RCCEx_PLLSAI2_Config>
 800215a:	4603      	mov	r3, r0
 800215c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800215e:	e003      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	74fb      	strb	r3, [r7, #19]
      break;
 8002164:	e000      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800216e:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	494e      	ldr	r1, [pc, #312]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002184:	e001      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 809f 	beq.w	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800219c:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a40      	ldr	r2, [pc, #256]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	2301      	movs	r3, #1
 80021cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021da:	f7fe fce9 	bl	8000bb0 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021e0:	e009      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe fce5 	bl	8000bb0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	74fb      	strb	r3, [r7, #19]
        break;
 80021f4:	e005      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ef      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d15b      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01f      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	429a      	cmp	r2, r3
 8002224:	d019      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fca4 	bl	8000bb0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	e00b      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe fca0 	bl	8000bb0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d902      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	74fb      	strb	r3, [r7, #19]
            break;
 8002282:	e006      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ec      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022b0:	e008      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	74bb      	strb	r3, [r7, #18]
 80022b6:	e005      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c4:	7c7b      	ldrb	r3, [r7, #17]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4ba0      	ldr	r3, [pc, #640]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	4a9f      	ldr	r2, [pc, #636]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022e2:	4b9a      	ldr	r3, [pc, #616]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f023 0203 	bic.w	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	4996      	ldr	r1, [pc, #600]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002304:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 020c 	bic.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	498e      	ldr	r1, [pc, #568]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002326:	4b89      	ldr	r3, [pc, #548]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	4985      	ldr	r1, [pc, #532]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002348:	4b80      	ldr	r3, [pc, #512]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002356:	497d      	ldr	r1, [pc, #500]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4974      	ldr	r1, [pc, #464]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800238c:	4b6f      	ldr	r3, [pc, #444]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	496c      	ldr	r1, [pc, #432]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023bc:	4963      	ldr	r1, [pc, #396]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023de:	495b      	ldr	r1, [pc, #364]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f2:	4b56      	ldr	r3, [pc, #344]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	4952      	ldr	r1, [pc, #328]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002414:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	494a      	ldr	r1, [pc, #296]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	4941      	ldr	r1, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002458:	4b3c      	ldr	r3, [pc, #240]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002466:	4939      	ldr	r1, [pc, #228]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	4930      	ldr	r1, [pc, #192]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002498:	d106      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a4:	60d3      	str	r3, [r2, #12]
 80024a6:	e011      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f8f9 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d04d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80024f2:	e012      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002500:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002512:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002522:	d106      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252e:	60d3      	str	r3, [r2, #12]
 8002530:	e020      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800253a:	d109      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a02      	ldr	r2, [pc, #8]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	60d3      	str	r3, [r2, #12]
 8002548:	e014      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f8a5 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d028      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258e:	4947      	ldr	r1, [pc, #284]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800259a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259e:	d106      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a41      	ldr	r2, [pc, #260]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025aa:	60d3      	str	r3, [r2, #12]
 80025ac:	e011      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f876 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01e      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ee:	492f      	ldr	r1, [pc, #188]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f851 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002628:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800262a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800262e:	f023 0204 	bic.w	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002638:	491c      	ldr	r1, [pc, #112]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800264e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002652:	f023 0218 	bic.w	r2, r3, #24
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	4913      	ldr	r1, [pc, #76]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002680:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00e      	beq.n	80026e8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d103      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d13f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e03c      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d00c      	beq.n	800270a <RCCEx_PLLSAI1_Config+0x5a>
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d013      	beq.n	800271c <RCCEx_PLLSAI1_Config+0x6c>
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d120      	bne.n	800273a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f8:	4b61      	ldr	r3, [pc, #388]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d11d      	bne.n	8002740 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e01a      	b.n	8002740 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e013      	b.n	8002744 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271c:	4b58      	ldr	r3, [pc, #352]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002728:	4b55      	ldr	r3, [pc, #340]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002738:	e006      	b.n	8002748 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      break;
 800273e:	e004      	b.n	800274a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002740:	bf00      	nop
 8002742:	e002      	b.n	800274a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002744:	bf00      	nop
 8002746:	e000      	b.n	800274a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002748:	bf00      	nop
    }

    if(status == HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d108      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4948      	ldr	r1, [pc, #288]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 8086 	bne.w	8002876 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800276a:	4b45      	ldr	r3, [pc, #276]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a44      	ldr	r2, [pc, #272]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002776:	f7fe fa1b 	bl	8000bb0 <HAL_GetTick>
 800277a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800277c:	e009      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277e:	f7fe fa17 	bl	8000bb0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	73fb      	strb	r3, [r7, #15]
        break;
 8002790:	e005      	b.n	800279e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d168      	bne.n	8002876 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d113      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027aa:	4b35      	ldr	r3, [pc, #212]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	4b35      	ldr	r3, [pc, #212]	; (8002884 <RCCEx_PLLSAI1_Config+0x1d4>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	0211      	lsls	r1, r2, #8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68d2      	ldr	r2, [r2, #12]
 80027bc:	06d2      	lsls	r2, r2, #27
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	430a      	orrs	r2, r1
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	610b      	str	r3, [r1, #16]
 80027d0:	e02d      	b.n	800282e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d115      	bne.n	8002804 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <RCCEx_PLLSAI1_Config+0x1d8>)
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6892      	ldr	r2, [r2, #8]
 80027e4:	0211      	lsls	r1, r2, #8
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6912      	ldr	r2, [r2, #16]
 80027ea:	0852      	lsrs	r2, r2, #1
 80027ec:	3a01      	subs	r2, #1
 80027ee:	0552      	lsls	r2, r2, #21
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6852      	ldr	r2, [r2, #4]
 80027f6:	3a01      	subs	r2, #1
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	430a      	orrs	r2, r1
 80027fc:	4920      	ldr	r1, [pc, #128]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	610b      	str	r3, [r1, #16]
 8002802:	e014      	b.n	800282e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <RCCEx_PLLSAI1_Config+0x1dc>)
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6892      	ldr	r2, [r2, #8]
 8002810:	0211      	lsls	r1, r2, #8
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6952      	ldr	r2, [r2, #20]
 8002816:	0852      	lsrs	r2, r2, #1
 8002818:	3a01      	subs	r2, #1
 800281a:	0652      	lsls	r2, r2, #25
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6852      	ldr	r2, [r2, #4]
 8002822:	3a01      	subs	r2, #1
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	430a      	orrs	r2, r1
 8002828:	4915      	ldr	r1, [pc, #84]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002838:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe f9b9 	bl	8000bb0 <HAL_GetTick>
 800283e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002840:	e009      	b.n	8002856 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002842:	f7fe f9b5 	bl	8000bb0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d902      	bls.n	8002856 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	73fb      	strb	r3, [r7, #15]
          break;
 8002854:	e005      	b.n	8002862 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ef      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	07ff800f 	.word	0x07ff800f
 8002888:	ff9f800f 	.word	0xff9f800f
 800288c:	f9ff800f 	.word	0xf9ff800f

08002890 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0203 	and.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d103      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
       ||
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d13f      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e03c      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d00c      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x5a>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d013      	beq.n	80028fc <RCCEx_PLLSAI2_Config+0x6c>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d120      	bne.n	800291a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028d8:	4b61      	ldr	r3, [pc, #388]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11d      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e01a      	b.n	8002920 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e013      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002918:	e006      	b.n	8002928 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e004      	b.n	800292a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002920:	bf00      	nop
 8002922:	e002      	b.n	800292a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002928:	bf00      	nop
    }

    if(status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f023 0203 	bic.w	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4948      	ldr	r1, [pc, #288]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 8086 	bne.w	8002a56 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a44      	ldr	r2, [pc, #272]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002956:	f7fe f92b 	bl	8000bb0 <HAL_GetTick>
 800295a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800295c:	e009      	b.n	8002972 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295e:	f7fe f927 	bl	8000bb0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d902      	bls.n	8002972 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	73fb      	strb	r3, [r7, #15]
        break;
 8002970:	e005      	b.n	800297e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d168      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d113      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298a:	4b35      	ldr	r3, [pc, #212]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	06d2      	lsls	r2, r2, #27
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6852      	ldr	r2, [r2, #4]
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	430a      	orrs	r2, r1
 80029aa:	492d      	ldr	r1, [pc, #180]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	614b      	str	r3, [r1, #20]
 80029b0:	e02d      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d115      	bne.n	80029e4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029be:	4013      	ands	r3, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	0211      	lsls	r1, r2, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6912      	ldr	r2, [r2, #16]
 80029ca:	0852      	lsrs	r2, r2, #1
 80029cc:	3a01      	subs	r2, #1
 80029ce:	0552      	lsls	r2, r2, #21
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6852      	ldr	r2, [r2, #4]
 80029d6:	3a01      	subs	r2, #1
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	430a      	orrs	r2, r1
 80029dc:	4920      	ldr	r1, [pc, #128]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	614b      	str	r3, [r1, #20]
 80029e2:	e014      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1dc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6892      	ldr	r2, [r2, #8]
 80029f0:	0211      	lsls	r1, r2, #8
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6952      	ldr	r2, [r2, #20]
 80029f6:	0852      	lsrs	r2, r2, #1
 80029f8:	3a01      	subs	r2, #1
 80029fa:	0652      	lsls	r2, r2, #25
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6852      	ldr	r2, [r2, #4]
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	430a      	orrs	r2, r1
 8002a08:	4915      	ldr	r1, [pc, #84]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f8c9 	bl	8000bb0 <HAL_GetTick>
 8002a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a20:	e009      	b.n	8002a36 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a22:	f7fe f8c5 	bl	8000bb0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d902      	bls.n	8002a36 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	73fb      	strb	r3, [r7, #15]
          break;
 8002a34:	e005      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4903      	ldr	r1, [pc, #12]	; (8002a60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	07ff800f 	.word	0x07ff800f
 8002a68:	ff9f800f 	.word	0xff9f800f
 8002a6c:	f9ff800f 	.word	0xf9ff800f

08002a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e049      	b.n	8002b16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd ff16 	bl	80008c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fa4c 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_TIM_PWM_Start+0x24>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e03c      	b.n	8002bbe <HAL_TIM_PWM_Start+0x9e>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d109      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x3e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	e02f      	b.n	8002bbe <HAL_TIM_PWM_Start+0x9e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d109      	bne.n	8002b78 <HAL_TIM_PWM_Start+0x58>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e022      	b.n	8002bbe <HAL_TIM_PWM_Start+0x9e>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d109      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x72>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e015      	b.n	8002bbe <HAL_TIM_PWM_Start+0x9e>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x8c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x9e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e09c      	b.n	8002d00 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0xb6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	e023      	b.n	8002c1e <HAL_TIM_PWM_Start+0xfe>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xc6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	e01b      	b.n	8002c1e <HAL_TIM_PWM_Start+0xfe>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	e013      	b.n	8002c1e <HAL_TIM_PWM_Start+0xfe>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xe6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_PWM_Start+0xfe>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xf6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	e003      	b.n	8002c1e <HAL_TIM_PWM_Start+0xfe>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fd00 	bl	800362c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_TIM_PWM_Start+0x1e8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x13e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_TIM_PWM_Start+0x1ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x13e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_TIM_PWM_Start+0x1f0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x13e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_TIM_PWM_Start+0x1f4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x13e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <HAL_TIM_PWM_Start+0x1f8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x142>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_TIM_PWM_Start+0x144>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_TIM_PWM_Start+0x1e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8a:	d018      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_TIM_PWM_Start+0x1fc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_TIM_PWM_Start+0x200>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <HAL_TIM_PWM_Start+0x204>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_TIM_PWM_Start+0x1ec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIM_PWM_Start+0x19e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <HAL_TIM_PWM_Start+0x1f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d115      	bne.n	8002cea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_TIM_PWM_Start+0x208>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d015      	beq.n	8002cfc <HAL_TIM_PWM_Start+0x1dc>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d011      	beq.n	8002cfc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce8:	e008      	b.n	8002cfc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e000      	b.n	8002cfe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40013400 	.word	0x40013400
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40000c00 	.word	0x40000c00
 8002d28:	00010007 	.word	0x00010007

08002d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0fd      	b.n	8002f42 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b14      	cmp	r3, #20
 8002d52:	f200 80f0 	bhi.w	8002f36 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002f37 	.word	0x08002f37
 8002d64:	08002f37 	.word	0x08002f37
 8002d68:	08002f37 	.word	0x08002f37
 8002d6c:	08002df1 	.word	0x08002df1
 8002d70:	08002f37 	.word	0x08002f37
 8002d74:	08002f37 	.word	0x08002f37
 8002d78:	08002f37 	.word	0x08002f37
 8002d7c:	08002e33 	.word	0x08002e33
 8002d80:	08002f37 	.word	0x08002f37
 8002d84:	08002f37 	.word	0x08002f37
 8002d88:	08002f37 	.word	0x08002f37
 8002d8c:	08002e73 	.word	0x08002e73
 8002d90:	08002f37 	.word	0x08002f37
 8002d94:	08002f37 	.word	0x08002f37
 8002d98:	08002f37 	.word	0x08002f37
 8002d9c:	08002eb5 	.word	0x08002eb5
 8002da0:	08002f37 	.word	0x08002f37
 8002da4:	08002f37 	.word	0x08002f37
 8002da8:	08002f37 	.word	0x08002f37
 8002dac:	08002ef5 	.word	0x08002ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f962 	bl	8003080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e0a3      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9d2 	bl	80031a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e082      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fa3b 	bl	80032b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e062      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 faa3 	bl	80033c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e041      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 faec 	bl	8003498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ef2:	e021      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fb30 	bl	8003560 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f34:	e000      	b.n	8002f38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002f36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a40      	ldr	r2, [pc, #256]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d00f      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3d      	ldr	r2, [pc, #244]	; (8003064 <TIM_Base_SetConfig+0x118>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <TIM_Base_SetConfig+0x11c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <TIM_Base_SetConfig+0x120>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01f      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d01b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <TIM_Base_SetConfig+0x118>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d017      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	; (8003068 <TIM_Base_SetConfig+0x11c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <TIM_Base_SetConfig+0x120>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00f      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <TIM_Base_SetConfig+0x128>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <TIM_Base_SetConfig+0x12c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x9a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <TIM_Base_SetConfig+0x130>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d108      	bne.n	8002ff8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00f      	beq.n	8003044 <TIM_Base_SetConfig+0xf8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00b      	beq.n	8003044 <TIM_Base_SetConfig+0xf8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a11      	ldr	r2, [pc, #68]	; (8003074 <TIM_Base_SetConfig+0x128>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <TIM_Base_SetConfig+0x12c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_Base_SetConfig+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0f      	ldr	r2, [pc, #60]	; (800307c <TIM_Base_SetConfig+0x130>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d103      	bne.n	800304c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40013400 	.word	0x40013400
 8003074:	40014000 	.word	0x40014000
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 0302 	bic.w	r3, r3, #2
 80030cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <TIM_OC1_SetConfig+0x10c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00f      	beq.n	8003100 <TIM_OC1_SetConfig+0x80>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <TIM_OC1_SetConfig+0x110>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_OC1_SetConfig+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <TIM_OC1_SetConfig+0x114>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_OC1_SetConfig+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <TIM_OC1_SetConfig+0x118>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_OC1_SetConfig+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a28      	ldr	r2, [pc, #160]	; (800319c <TIM_OC1_SetConfig+0x11c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10c      	bne.n	800311a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <TIM_OC1_SetConfig+0x10c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_OC1_SetConfig+0xc2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <TIM_OC1_SetConfig+0x110>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_OC1_SetConfig+0xc2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <TIM_OC1_SetConfig+0x114>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_OC1_SetConfig+0xc2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <TIM_OC1_SetConfig+0x118>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_OC1_SetConfig+0xc2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <TIM_OC1_SetConfig+0x11c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d111      	bne.n	8003166 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40013400 	.word	0x40013400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800

080031a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0210 	bic.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0320 	bic.w	r3, r3, #32
 80031ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <TIM_OC2_SetConfig+0x100>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC2_SetConfig+0x6c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <TIM_OC2_SetConfig+0x104>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d10d      	bne.n	8003228 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <TIM_OC2_SetConfig+0x100>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00f      	beq.n	8003250 <TIM_OC2_SetConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <TIM_OC2_SetConfig+0x104>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_OC2_SetConfig+0xb0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <TIM_OC2_SetConfig+0x108>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_OC2_SetConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <TIM_OC2_SetConfig+0x10c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_OC2_SetConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <TIM_OC2_SetConfig+0x110>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d113      	bne.n	8003278 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40013400 	.word	0x40013400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a27      	ldr	r2, [pc, #156]	; (80033b0 <TIM_OC3_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC3_SetConfig+0x6a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_OC3_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10d      	bne.n	800333a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <TIM_OC3_SetConfig+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00f      	beq.n	8003362 <TIM_OC3_SetConfig+0xae>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <TIM_OC3_SetConfig+0x100>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_OC3_SetConfig+0xae>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <TIM_OC3_SetConfig+0x104>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <TIM_OC3_SetConfig+0xae>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <TIM_OC3_SetConfig+0x108>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_OC3_SetConfig+0xae>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <TIM_OC3_SetConfig+0x10c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a18      	ldr	r2, [pc, #96]	; (8003484 <TIM_OC4_SetConfig+0xc0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00f      	beq.n	8003448 <TIM_OC4_SetConfig+0x84>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <TIM_OC4_SetConfig+0xc4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_OC4_SetConfig+0x84>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <TIM_OC4_SetConfig+0xc8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_OC4_SetConfig+0x84>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC4_SetConfig+0xcc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC4_SetConfig+0x84>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <TIM_OC4_SetConfig+0xd0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d109      	bne.n	800345c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40013400 	.word	0x40013400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <TIM_OC5_SetConfig+0xb4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00f      	beq.n	8003512 <TIM_OC5_SetConfig+0x7a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <TIM_OC5_SetConfig+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_OC5_SetConfig+0x7a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <TIM_OC5_SetConfig+0xbc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_OC5_SetConfig+0x7a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <TIM_OC5_SetConfig+0xc0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_OC5_SetConfig+0x7a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <TIM_OC5_SetConfig+0xc4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d109      	bne.n	8003526 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800

08003560 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	051b      	lsls	r3, r3, #20
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <TIM_OC6_SetConfig+0xb8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00f      	beq.n	80035dc <TIM_OC6_SetConfig+0x7c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <TIM_OC6_SetConfig+0xbc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00b      	beq.n	80035dc <TIM_OC6_SetConfig+0x7c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a16      	ldr	r2, [pc, #88]	; (8003620 <TIM_OC6_SetConfig+0xc0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <TIM_OC6_SetConfig+0x7c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <TIM_OC6_SetConfig+0xc4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_OC6_SetConfig+0x7c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <TIM_OC6_SetConfig+0xc8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	029b      	lsls	r3, r3, #10
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40013400 	.word	0x40013400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800

0800362c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e068      	b.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d108      	bne.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d018      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a13      	ldr	r2, [pc, #76]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10c      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	4313      	orrs	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40013400 	.word	0x40013400
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40014000 	.word	0x40014000

08003788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e042      	b.n	8003820 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd f929 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2224      	movs	r2, #36	; 0x24
 80037b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f82c 	bl	8003828 <UART_SetConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 faf2 	bl	8003dcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb79 	bl	8003f10 <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800382c:	b088      	sub	sp, #32
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4313      	orrs	r3, r2
 800384c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	4313      	orrs	r3, r2
 8003856:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4bb1      	ldr	r3, [pc, #708]	; (8003b24 <UART_SetConfig+0x2fc>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	430b      	orrs	r3, r1
 800386a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4aa6      	ldr	r2, [pc, #664]	; (8003b28 <UART_SetConfig+0x300>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4313      	orrs	r3, r2
 800389a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	69f9      	ldr	r1, [r7, #28]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	f023 010f 	bic.w	r1, r3, #15
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a97      	ldr	r2, [pc, #604]	; (8003b2c <UART_SetConfig+0x304>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d121      	bne.n	8003918 <UART_SetConfig+0xf0>
 80038d4:	4b96      	ldr	r3, [pc, #600]	; (8003b30 <UART_SetConfig+0x308>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d816      	bhi.n	8003910 <UART_SetConfig+0xe8>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0xc0>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003905 	.word	0x08003905
 80038f0:	080038ff 	.word	0x080038ff
 80038f4:	0800390b 	.word	0x0800390b
 80038f8:	2301      	movs	r3, #1
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e0e8      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80038fe:	2302      	movs	r3, #2
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e0e5      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003904:	2304      	movs	r3, #4
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e0e2      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 800390a:	2308      	movs	r3, #8
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e0df      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003910:	2310      	movs	r3, #16
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	bf00      	nop
 8003916:	e0db      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a85      	ldr	r2, [pc, #532]	; (8003b34 <UART_SetConfig+0x30c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d134      	bne.n	800398c <UART_SetConfig+0x164>
 8003922:	4b83      	ldr	r3, [pc, #524]	; (8003b30 <UART_SetConfig+0x308>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d829      	bhi.n	8003984 <UART_SetConfig+0x15c>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0x110>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800396d 	.word	0x0800396d
 800393c:	08003985 	.word	0x08003985
 8003940:	08003985 	.word	0x08003985
 8003944:	08003985 	.word	0x08003985
 8003948:	08003979 	.word	0x08003979
 800394c:	08003985 	.word	0x08003985
 8003950:	08003985 	.word	0x08003985
 8003954:	08003985 	.word	0x08003985
 8003958:	08003973 	.word	0x08003973
 800395c:	08003985 	.word	0x08003985
 8003960:	08003985 	.word	0x08003985
 8003964:	08003985 	.word	0x08003985
 8003968:	0800397f 	.word	0x0800397f
 800396c:	2300      	movs	r3, #0
 800396e:	76fb      	strb	r3, [r7, #27]
 8003970:	e0ae      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003972:	2302      	movs	r3, #2
 8003974:	76fb      	strb	r3, [r7, #27]
 8003976:	e0ab      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003978:	2304      	movs	r3, #4
 800397a:	76fb      	strb	r3, [r7, #27]
 800397c:	e0a8      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 800397e:	2308      	movs	r3, #8
 8003980:	76fb      	strb	r3, [r7, #27]
 8003982:	e0a5      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003984:	2310      	movs	r3, #16
 8003986:	76fb      	strb	r3, [r7, #27]
 8003988:	bf00      	nop
 800398a:	e0a1      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <UART_SetConfig+0x310>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d120      	bne.n	80039d8 <UART_SetConfig+0x1b0>
 8003996:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <UART_SetConfig+0x308>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d00f      	beq.n	80039c4 <UART_SetConfig+0x19c>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d802      	bhi.n	80039ae <UART_SetConfig+0x186>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <UART_SetConfig+0x190>
 80039ac:	e010      	b.n	80039d0 <UART_SetConfig+0x1a8>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d005      	beq.n	80039be <UART_SetConfig+0x196>
 80039b2:	2b30      	cmp	r3, #48	; 0x30
 80039b4:	d009      	beq.n	80039ca <UART_SetConfig+0x1a2>
 80039b6:	e00b      	b.n	80039d0 <UART_SetConfig+0x1a8>
 80039b8:	2300      	movs	r3, #0
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e088      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80039be:	2302      	movs	r3, #2
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e085      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80039c4:	2304      	movs	r3, #4
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e082      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80039ca:	2308      	movs	r3, #8
 80039cc:	76fb      	strb	r3, [r7, #27]
 80039ce:	e07f      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80039d0:	2310      	movs	r3, #16
 80039d2:	76fb      	strb	r3, [r7, #27]
 80039d4:	bf00      	nop
 80039d6:	e07b      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <UART_SetConfig+0x314>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d120      	bne.n	8003a24 <UART_SetConfig+0x1fc>
 80039e2:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <UART_SetConfig+0x308>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d00f      	beq.n	8003a10 <UART_SetConfig+0x1e8>
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d802      	bhi.n	80039fa <UART_SetConfig+0x1d2>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <UART_SetConfig+0x1dc>
 80039f8:	e010      	b.n	8003a1c <UART_SetConfig+0x1f4>
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d005      	beq.n	8003a0a <UART_SetConfig+0x1e2>
 80039fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003a00:	d009      	beq.n	8003a16 <UART_SetConfig+0x1ee>
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x1f4>
 8003a04:	2300      	movs	r3, #0
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e062      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e05f      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a10:	2304      	movs	r3, #4
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e05c      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a16:	2308      	movs	r3, #8
 8003a18:	76fb      	strb	r3, [r7, #27]
 8003a1a:	e059      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	bf00      	nop
 8003a22:	e055      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a45      	ldr	r2, [pc, #276]	; (8003b40 <UART_SetConfig+0x318>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d124      	bne.n	8003a78 <UART_SetConfig+0x250>
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <UART_SetConfig+0x308>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d012      	beq.n	8003a64 <UART_SetConfig+0x23c>
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	d802      	bhi.n	8003a4a <UART_SetConfig+0x222>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <UART_SetConfig+0x230>
 8003a48:	e012      	b.n	8003a70 <UART_SetConfig+0x248>
 8003a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4e:	d006      	beq.n	8003a5e <UART_SetConfig+0x236>
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x242>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x248>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	e038      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	76fb      	strb	r3, [r7, #27]
 8003a62:	e035      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a64:	2304      	movs	r3, #4
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e032      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e02f      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a70:	2310      	movs	r3, #16
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	bf00      	nop
 8003a76:	e02b      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <UART_SetConfig+0x300>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d124      	bne.n	8003acc <UART_SetConfig+0x2a4>
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <UART_SetConfig+0x308>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d012      	beq.n	8003ab8 <UART_SetConfig+0x290>
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d802      	bhi.n	8003a9e <UART_SetConfig+0x276>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <UART_SetConfig+0x284>
 8003a9c:	e012      	b.n	8003ac4 <UART_SetConfig+0x29c>
 8003a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa2:	d006      	beq.n	8003ab2 <UART_SetConfig+0x28a>
 8003aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa8:	d009      	beq.n	8003abe <UART_SetConfig+0x296>
 8003aaa:	e00b      	b.n	8003ac4 <UART_SetConfig+0x29c>
 8003aac:	2300      	movs	r3, #0
 8003aae:	76fb      	strb	r3, [r7, #27]
 8003ab0:	e00e      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	76fb      	strb	r3, [r7, #27]
 8003ab6:	e00b      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	76fb      	strb	r3, [r7, #27]
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003abe:	2308      	movs	r3, #8
 8003ac0:	76fb      	strb	r3, [r7, #27]
 8003ac2:	e005      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	76fb      	strb	r3, [r7, #27]
 8003ac8:	bf00      	nop
 8003aca:	e001      	b.n	8003ad0 <UART_SetConfig+0x2a8>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <UART_SetConfig+0x300>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	f040 80a1 	bne.w	8003c1e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003adc:	7efb      	ldrb	r3, [r7, #27]
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d836      	bhi.n	8003b50 <UART_SetConfig+0x328>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0x2c0>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b51 	.word	0x08003b51
 8003af8:	08003b1b 	.word	0x08003b1b
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b49 	.word	0x08003b49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe f9ba 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003b10:	6178      	str	r0, [r7, #20]
        break;
 8003b12:	e022      	b.n	8003b5a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <UART_SetConfig+0x31c>)
 8003b16:	617b      	str	r3, [r7, #20]
        break;
 8003b18:	e01f      	b.n	8003b5a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1a:	f7fe f91d 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003b1e:	6178      	str	r0, [r7, #20]
        break;
 8003b20:	e01b      	b.n	8003b5a <UART_SetConfig+0x332>
 8003b22:	bf00      	nop
 8003b24:	cfff69f3 	.word	0xcfff69f3
 8003b28:	40008000 	.word	0x40008000
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40004400 	.word	0x40004400
 8003b38:	40004800 	.word	0x40004800
 8003b3c:	40004c00 	.word	0x40004c00
 8003b40:	40005000 	.word	0x40005000
 8003b44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4c:	617b      	str	r3, [r7, #20]
        break;
 8003b4e:	e004      	b.n	8003b5a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	76bb      	strb	r3, [r7, #26]
        break;
 8003b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 811d 	beq.w	8003d9c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	4a97      	ldr	r2, [pc, #604]	; (8003dc4 <UART_SetConfig+0x59c>)
 8003b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b74:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d305      	bcc.n	8003b92 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d902      	bls.n	8003b98 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	76bb      	strb	r3, [r7, #26]
 8003b96:	e101      	b.n	8003d9c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <UART_SetConfig+0x59c>)
 8003ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fc fb22 	bl	80001fc <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	f04f 0400 	mov.w	r4, #0
 8003bc8:	0214      	lsls	r4, r2, #8
 8003bca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bce:	020b      	lsls	r3, r1, #8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6852      	ldr	r2, [r2, #4]
 8003bd4:	0852      	lsrs	r2, r2, #1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	eb13 0b01 	adds.w	fp, r3, r1
 8003be0:	eb44 0c02 	adc.w	ip, r4, r2
 8003be4:	4658      	mov	r0, fp
 8003be6:	4661      	mov	r1, ip
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f04f 0400 	mov.w	r4, #0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	f7fc fb02 	bl	80001fc <__aeabi_uldivmod>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c04:	d308      	bcc.n	8003c18 <UART_SetConfig+0x3f0>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0c:	d204      	bcs.n	8003c18 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e0c1      	b.n	8003d9c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	76bb      	strb	r3, [r7, #26]
 8003c1c:	e0be      	b.n	8003d9c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d164      	bne.n	8003cf2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003c28:	7efb      	ldrb	r3, [r7, #27]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d827      	bhi.n	8003c7e <UART_SetConfig+0x456>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x40c>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c69 	.word	0x08003c69
 8003c40:	08003c7f 	.word	0x08003c7f
 8003c44:	08003c6f 	.word	0x08003c6f
 8003c48:	08003c7f 	.word	0x08003c7f
 8003c4c:	08003c7f 	.word	0x08003c7f
 8003c50:	08003c7f 	.word	0x08003c7f
 8003c54:	08003c77 	.word	0x08003c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe f914 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	6178      	str	r0, [r7, #20]
        break;
 8003c5e:	e013      	b.n	8003c88 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c60:	f7fe f926 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003c64:	6178      	str	r0, [r7, #20]
        break;
 8003c66:	e00f      	b.n	8003c88 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <UART_SetConfig+0x5a0>)
 8003c6a:	617b      	str	r3, [r7, #20]
        break;
 8003c6c:	e00c      	b.n	8003c88 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7fe f873 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003c72:	6178      	str	r0, [r7, #20]
        break;
 8003c74:	e008      	b.n	8003c88 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7a:	617b      	str	r3, [r7, #20]
        break;
 8003c7c:	e004      	b.n	8003c88 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	76bb      	strb	r3, [r7, #26]
        break;
 8003c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8086 	beq.w	8003d9c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	4a4b      	ldr	r2, [pc, #300]	; (8003dc4 <UART_SetConfig+0x59c>)
 8003c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca2:	005a      	lsls	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	441a      	add	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b0f      	cmp	r3, #15
 8003cbc:	d916      	bls.n	8003cec <UART_SetConfig+0x4c4>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d212      	bcs.n	8003cec <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f023 030f 	bic.w	r3, r3, #15
 8003cce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	89fa      	ldrh	r2, [r7, #14]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e057      	b.n	8003d9c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	76bb      	strb	r3, [r7, #26]
 8003cf0:	e054      	b.n	8003d9c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf2:	7efb      	ldrb	r3, [r7, #27]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d828      	bhi.n	8003d4a <UART_SetConfig+0x522>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0x4d8>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d25 	.word	0x08003d25
 8003d04:	08003d2d 	.word	0x08003d2d
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d4b 	.word	0x08003d4b
 8003d10:	08003d3b 	.word	0x08003d3b
 8003d14:	08003d4b 	.word	0x08003d4b
 8003d18:	08003d4b 	.word	0x08003d4b
 8003d1c:	08003d4b 	.word	0x08003d4b
 8003d20:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7fe f8ae 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8003d28:	6178      	str	r0, [r7, #20]
        break;
 8003d2a:	e013      	b.n	8003d54 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d2c:	f7fe f8c0 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003d30:	6178      	str	r0, [r7, #20]
        break;
 8003d32:	e00f      	b.n	8003d54 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <UART_SetConfig+0x5a0>)
 8003d36:	617b      	str	r3, [r7, #20]
        break;
 8003d38:	e00c      	b.n	8003d54 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe f80d 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8003d3e:	6178      	str	r0, [r7, #20]
        break;
 8003d40:	e008      	b.n	8003d54 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	617b      	str	r3, [r7, #20]
        break;
 8003d48:	e004      	b.n	8003d54 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	76bb      	strb	r3, [r7, #26]
        break;
 8003d52:	bf00      	nop
    }

    if (pclk != 0U)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d020      	beq.n	8003d9c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <UART_SetConfig+0x59c>)
 8003d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d64:	461a      	mov	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	d908      	bls.n	8003d98 <UART_SetConfig+0x570>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d204      	bcs.n	8003d98 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	e001      	b.n	8003d9c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003db8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003dc4:	080043a4 	.word	0x080043a4
 8003dc8:	00f42400 	.word	0x00f42400

08003dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d10a      	bne.n	8003ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f20:	f7fc fe46 	bl	8000bb0 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d10e      	bne.n	8003f52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f82c 	bl	8003fa0 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e022      	b.n	8003f98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d10e      	bne.n	8003f7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f816 	bl	8003fa0 <UART_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00c      	b.n	8003f98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb0:	e062      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d05e      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fc fdf9 	bl	8000bb0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11d      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fde:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e045      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02e      	beq.n	8004078 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004028:	d126      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004032:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004042:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e00f      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	d08d      	beq.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e027      	b.n	8004106 <HAL_UARTEx_DisableFifoMode+0x66>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	; 0x24
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004126:	2302      	movs	r3, #2
 8004128:	e02d      	b.n	8004186 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2224      	movs	r2, #36	; 0x24
 8004136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f850 	bl	800420c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e02d      	b.n	8004202 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2224      	movs	r2, #36	; 0x24
 80041b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f812 	bl	800420c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004214:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800421e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004222:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800422c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004248:	e03d      	b.n	80042c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800424a:	2308      	movs	r3, #8
 800424c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800424e:	2308      	movs	r3, #8
 8004250:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	0e5b      	lsrs	r3, r3, #25
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	0f5b      	lsrs	r3, r3, #29
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004272:	7fbb      	ldrb	r3, [r7, #30]
 8004274:	7f3a      	ldrb	r2, [r7, #28]
 8004276:	f107 0120 	add.w	r1, r7, #32
 800427a:	440a      	add	r2, r1
 800427c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	7f3a      	ldrb	r2, [r7, #28]
 8004286:	f107 0120 	add.w	r1, r7, #32
 800428a:	440a      	add	r2, r1
 800428c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004290:	fb93 f3f2 	sdiv	r3, r3, r2
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800429c:	7ffb      	ldrb	r3, [r7, #31]
 800429e:	7f7a      	ldrb	r2, [r7, #29]
 80042a0:	f107 0120 	add.w	r1, r7, #32
 80042a4:	440a      	add	r2, r1
 80042a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	7f7a      	ldrb	r2, [r7, #29]
 80042b0:	f107 0120 	add.w	r1, r7, #32
 80042b4:	440a      	add	r2, r1
 80042b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80042ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80042c6:	bf00      	nop
 80042c8:	3724      	adds	r7, #36	; 0x24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	0800434c 	.word	0x0800434c
 80042d8:	08004354 	.word	0x08004354

080042dc <__libc_init_array>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	4e0d      	ldr	r6, [pc, #52]	; (8004314 <__libc_init_array+0x38>)
 80042e0:	4c0d      	ldr	r4, [pc, #52]	; (8004318 <__libc_init_array+0x3c>)
 80042e2:	1ba4      	subs	r4, r4, r6
 80042e4:	10a4      	asrs	r4, r4, #2
 80042e6:	2500      	movs	r5, #0
 80042e8:	42a5      	cmp	r5, r4
 80042ea:	d109      	bne.n	8004300 <__libc_init_array+0x24>
 80042ec:	4e0b      	ldr	r6, [pc, #44]	; (800431c <__libc_init_array+0x40>)
 80042ee:	4c0c      	ldr	r4, [pc, #48]	; (8004320 <__libc_init_array+0x44>)
 80042f0:	f000 f820 	bl	8004334 <_init>
 80042f4:	1ba4      	subs	r4, r4, r6
 80042f6:	10a4      	asrs	r4, r4, #2
 80042f8:	2500      	movs	r5, #0
 80042fa:	42a5      	cmp	r5, r4
 80042fc:	d105      	bne.n	800430a <__libc_init_array+0x2e>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004304:	4798      	blx	r3
 8004306:	3501      	adds	r5, #1
 8004308:	e7ee      	b.n	80042e8 <__libc_init_array+0xc>
 800430a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800430e:	4798      	blx	r3
 8004310:	3501      	adds	r5, #1
 8004312:	e7f2      	b.n	80042fa <__libc_init_array+0x1e>
 8004314:	080043c4 	.word	0x080043c4
 8004318:	080043c4 	.word	0x080043c4
 800431c:	080043c4 	.word	0x080043c4
 8004320:	080043c8 	.word	0x080043c8

08004324 <memset>:
 8004324:	4402      	add	r2, r0
 8004326:	4603      	mov	r3, r0
 8004328:	4293      	cmp	r3, r2
 800432a:	d100      	bne.n	800432e <memset+0xa>
 800432c:	4770      	bx	lr
 800432e:	f803 1b01 	strb.w	r1, [r3], #1
 8004332:	e7f9      	b.n	8004328 <memset+0x4>

08004334 <_init>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr

08004340 <_fini>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr
